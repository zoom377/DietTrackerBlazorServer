@page "/HealthMetrics"
@using DietTrackerBlazorServer.Components
@inherits DTComponentBase

<MudDataGrid @ref="_Grid"
             T=@HealthMetric
             Items=@_HealthMetrics
             SelectedItem=@_SelectedItem
             SelectedItemChanged=@SelectedItemChanged
             ReadOnly="true"
             SelectOnRowClick=true
             Dense="true"
             MultiSelection="false"
             Elevation="10"
             RowClassFunc="@GetRowClass">
    
    <Columns>
        <SelectColumn ShowInFooter=false ShowInHeader=false Size="Size.Small" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <TemplateColumn Title="Color">
            <CellTemplate>
                <div class="d-flex flex-nowrap align-items-center flex-1">
                    <MudColorPicker @bind-Text="context.Item.Color"
                                    Class="me-2"
                                    DisableAlpha="true" />
                    <MudIcon Icon="@Icons.Material.Rounded.Circle" Style="@($"color: {context.Item.Color}; align-self: center;")" />
                </div>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        You do not have any health metrics yet.
        You can add one by clicking the add button below.
    </NoRecordsContent>
    <PagerContent>
        @if (_HealthMetrics.Count >= 10)
        {
            <MudDataGridPager DisableRowsPerPage="true" />
        }
    </PagerContent>
</MudDataGrid>

<MudToolBar Dense>
    <MudIconButton Icon="@Icons.Material.Outlined.Add"
                   Variant="Variant.Outlined"
                   Color="Color.Success"
                   OnClick="@(async () => await _Dialog.Show(new HealthMetric()))" />
    <MudIconButton Icon="@Icons.Material.Outlined.Edit"
                   Variant="Variant.Outlined"
                   Disabled="@(_SelectedItem == null)"
                   Color="Color.Info"
                   OnClick="@(async () => await _Dialog.Show(_SelectedItem, DialogMode.Edit))" />
    <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                   Variant="Variant.Outlined"
                   Disabled="@(_SelectedItem == null)"
                   Color="Color.Error"
                   OnClick="@(async () => await _Dialog.Show(_SelectedItem, DialogMode.Delete))" />
</MudToolBar>

@* <MudButton Color="Color.Success" OnClick="@(async () => await _AddDialog.Show(new HealthMetric()))">
    Show add dialog
</MudButton>
<MudButton Color="Color.Warning" OnClick="@(async () => await _AddDialog.Show(new HealthMetric(), DialogMode.Edit))">
    Show edit dialog
</MudButton>
<MudButton Color="Color.Error" OnClick="@(async () => await _AddDialog.Show(new HealthMetric(), DialogMode.Delete))">
    Show delete dialog
</MudButton> *@


<DTDialog @ref="_Dialog" TItem="HealthMetric">
    <ItemFields>
        <MudTextField @bind-Value="context.Item.Name"
                      Label="Name"
                      Disabled="@context.Disabled"
                      Variant="Variant.Filled"
                      Placeholder="Name" />
        <MudTextField @bind-Value="context.Item.Description"
                      Label="Description"
                      Disabled="@context.Disabled"
                      Variant="Variant.Filled"
                      Placeholder="Description" />
        <MudColorPicker @bind-Text="context.Item.Color"
                        Label="Colour"
                        Variant="Variant.Filled"
                        Disabled="@context.Disabled" />
    </ItemFields>
</DTDialog>

 @* @if (_CurrentHealthMetrics.Count > 0)
{
    <DataGrid TItem="HealthMetric"
          Data="@_CurrentHealthMetrics"
          @bind-SelectedRow="_DataGridSelectedHealthMetric"
          Responsive
          ShowPager="true"
          PageSize="10"
          Bordered>


        <DataGridCommandColumn TItem="HealthMetric" />
        <DataGridColumn Field="@nameof(HealthMetric.Name)" TItem="HealthMetric" Caption="Name" />
        <DataGridColumn Field="@nameof(HealthMetric.Description)" TItem="HealthMetric" Caption="Description" />
        <DataGridColumn Field="@nameof(HealthMetric.Color)" TItem="HealthMetric" Caption="Colour">
            <DisplayTemplate>
                <ColorPicker Color="@context.Color" Disabled></ColorPicker>
            </DisplayTemplate>
        </DataGridColumn>

    </DataGrid>
}
else
{
    <Paragraph>
        You have not defined any health metrics.
        Click the <Text Color="TextColor.Primary">add</Text> button to create a new health metric.
    </Paragraph>
}
<Button Color="Color.Success" Clicked="@OnAddButtonClicked">
    <Icon Name="IconName.Add"></Icon>
    Add
</Button>
<Button Color="Color.Warning" Disabled="@(_DataGridSelectedHealthMetric == null)" Clicked="@OnEditButtonClicked">
    <Icon Name="IconName.Wrench"></Icon>
    Edit
</Button>
<Button Color="Color.Danger" Disabled="@(_DataGridSelectedHealthMetric == null)" Clicked="@OnDeleteButtonClicked">
    <Icon Name="IconName.Delete"></Icon>
    Delete
</Button>


<Modal @ref="_AddModal">
    <EditForm Model="@_SubjectHealthMetric" OnValidSubmit="@OnValidSubmit_AddHealthMetric">
        <ModalContent Centered>

            <ModalHeader>Add health metric</ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="_SubjectHealthMetric.Name" Placeholder="Enter a name..."></TextEdit>
                </Field>
                <Field>
                    <FieldLabel>Description</FieldLabel>
                    <TextEdit @bind-Text="_SubjectHealthMetric.Description" Placeholder="Enter a description..."></TextEdit>
                </Field>
                <Field>
                    <FieldLabel>Color</FieldLabel>
                    <ColorPicker @bind-Color="_SubjectHealthMetric.Color"></ColorPicker>
                </Field>
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
            </ModalBody>

            <ModalFooter>
                <Button Type="ButtonType.Submit" Color="Color.Success">
                    Add
                </Button>
                <Button Clicked="() => {_AddModal.Close(CloseReason.UserClosing);}" Color="Color.Warning">
                    Cancel
                </Button>
            </ModalFooter>

        </ModalContent>
    </EditForm>
</Modal>

<Modal @ref="_EditModal">
    <EditForm Model="@_SubjectHealthMetric" OnValidSubmit="@OnValidSubmit_EditHealthMetric">
        <ModalContent Centered>

            <ModalHeader>Edit health metric</ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="_SubjectHealthMetric.Name" Placeholder="Enter a name..."></TextEdit>
                </Field>
                <Field>
                    <FieldLabel>Description</FieldLabel>
                    <TextEdit @bind-Text="_SubjectHealthMetric.Description" Placeholder="Enter a description..."></TextEdit>
                </Field>
                <Field>
                    <ColorPicker @bind-Color="_SubjectHealthMetric.Color"></ColorPicker>
                </Field>
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
            </ModalBody>

            <ModalFooter>
                <Button Type="ButtonType.Submit" Color="Color.Warning">
                    Modify
                </Button>
                <Button Clicked="() => {_EditModal.Close(CloseReason.UserClosing);}" Color="Color.Warning">
                    Cancel
                </Button>
            </ModalFooter>

        </ModalContent>
    </EditForm>
</Modal>

<Modal @ref="_DeleteModal">
    <ModalContent Centered>

        <ModalHeader>Delete health metric</ModalHeader>

        <ModalBody>
            <Alert Color="Color.Danger" Visible>
                <AlertMessage>
                    @($"Delete \"{_SubjectHealthMetric.Name}\"?")
                </AlertMessage>

                <AlertDescription>
                    This will remove <Strong>all</Strong> data associated with this health metric.
                    Are you sure you want to delete @($"\"{_SubjectHealthMetric.Name}\"?")
                </AlertDescription>
            </Alert>
        </ModalBody>

        <ModalFooter>
            <Button Type="ButtonType.Submit" Color="Color.Danger" Clicked="@OnDeleteHealthMetricConfirmed">
                Delete
            </Button>
            <Button Clicked="() => {_DeleteModal.Close(CloseReason.UserClosing);}" Color="Color.Warning">
                Cancel
            </Button>
        </ModalFooter>

    </ModalContent>
</Modal> *@





